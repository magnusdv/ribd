% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/identityCoefs.R
\name{identityCoefs}
\alias{identityCoefs}
\alias{detailed2condensed}
\title{Omnibus function for identity coefficients}
\usage{
identityCoefs(
  x,
  ids,
  detailed = FALSE,
  Xchrom = FALSE,
  self = FALSE,
  simplify = TRUE,
  method = c("auto", "K", "WL", "LS", "GC", "identity", "idcoefs"),
  verbose = FALSE,
  ...
)

detailed2condensed(d)
}
\arguments{
\item{x}{A pedigree in the form of a \code{\link[pedtools:ped]{pedtools::ped}} object.}

\item{ids}{A vector of two ID labels.}

\item{detailed}{A logical. If FALSE (default), the 9 condensed coefficients
are computed; otherwise the 15 detailed identity coefficients.}

\item{Xchrom}{A logical, by default FALSE.}

\item{self}{A logical indicating if self-relationships (e.g., between a
pedigree member and itself) should be included. FALSE by default.}

\item{simplify}{Simplify the output (to a numeric of length 9) if \code{ids} has
length 2. Default: TRUE.}

\item{method}{Either "auto", "K", "WL", "LS", "GC", "identity" or "idcoefs".}

\item{verbose}{A logical.}

\item{...}{Further arguments.}

\item{d}{Either a numeric vector of length 15, or a data frame with 17
columns.}
}
\value{
A data frame with L + 2 columns, where L is either 9 (default) or 15
(if \code{detailed = TRUE}).

If \code{simplify = TRUE} and \code{length(ids) = 2}: A numeric vector of length \code{L}.
}
\description{
This function calculates the pairwise identity coefficients described by
Jacquard (1974). Unlike \code{\link[=condensedIdentity]{condensedIdentity()}} (and
\code{identity::identity.coefs()}), this function also computes the 15 \emph{detailed}
identity coefficients. If \code{detailed = FALSE} the output is equivalent to
\code{\link[=condensedIdentity]{condensedIdentity()}}, which is usually faster.
}
\details{
Karigl (1981) gave the first recursive algorithm for the 9 condensed Jacqaurd
coefficients, based on certain \emph{generalised kinship coefficients}. Karigl's
method is implemented in \code{\link[=condensedIdentity]{condensedIdentity()}}.

Weeks & Lange (1988) suggested a broader and more natural generalisation of
kinship coefficients, and a recursive algorithm for computing them. This is
implemented in \code{gKinship(..., method = "WL")}.

Lange & Sinsheimer (1992) described an even further generalisation of kinship
coefficients, allowing a mix of deterministic and random sampling of alleles.
This is also implemented in \code{gKinship(..., method = "LS")}.

In the same paper, Lange & Sinsheimer (1992) used the new generalisations to
give (i) an alternative algorithm for the 9 condensed identity coefficients,
and (ii) an algorithm for the 15 detailed coefficients. Both of these are
implemented in \code{identityCoefs()}.

\code{method = "idcoefs"} calls the C program \code{IdCoefs} (version 2.1.1) by Mark
Abney (2009). This requires \code{IdCoefs} to installed on the computer (see link
under References) and available on the system search path.
\code{identity_idcoefs()} then writes the necessary files to disk and calls
\code{IdCoefs} via \code{\link[=system]{system()}}.

\code{method = "identity"} wraps \code{identity::identity.coefs()}, which is an R
interface for \code{IdCoefs}.

Both the condensed and detailed coefficients are given in the orders used by
Jacquard (1974). The function \code{detailed2condensed} converts from detailed
coefficients (d1, ... d15) to condensed ones (D1, ..., D9) using the
following relations:
\itemize{
\item D1 = d1
\item D2 = d6
\item D3 = d2 + d3
\item D4 = d7
\item D5 = d4 + d5
\item D6 = d8
\item D7 = d9 + d12
\item D8 = d10 + d11 + d13 + d14
\item D9 = d15
}
}
\examples{
x = fullSibMating(1)
ids = 1:6

### Condensed coefficients
j1 = identityCoefs(x, ids, method = "K")
j2 = identityCoefs(x, ids, method = "WL")
j3 = identityCoefs(x, ids, method = "LS")
j4 = identityCoefs(x, ids, method = "GC")
j5 = condensedIdentity(x, ids) # legacy version
# j6 = identityCoefs(x, ids, method = "idcoefs") # requires IdCoefs installed

stopifnot(all.equal(j1,j2), all.equal(j1,j3), all.equal(j1,j4), all.equal(j1,j5))

### Detailed coefficients
jdet1 = identityCoefs(x, ids, detailed = TRUE, method = "LS")
jdet2 = identityCoefs(x, ids, detailed = TRUE, method = "GC")
stopifnot(all.equal(jdet1,jdet2))

### X chromosomal coefficients
jx1 = identityCoefs(x, ids, method = "K", Xchrom = TRUE)
jx2 = identityCoefs(x, ids, method = "GC", Xchrom = TRUE)
jx3 = condensedIdentityX(x, ids)  # legacy
stopifnot(all.equal(jx1,jx2), all.equal(jx1,jx3))

}
\references{
\itemize{
\item Jacquard, A. (1974). The Genetic Structure of Populations. Springer.
\item Karigl, G. (1981). A recursive algorithm for the calculation of identity
coefficients. Ann. Hum. Genet.
\item Weeks, D.E. & Lange, K. (1988). The affected-pedigree-member method of
linkage analysis. Am. J. Hum. Genet
\item Lange, K. & Sinsheimer, J.s. (1992). Calculation of genetic identity
coefficients. Ann. Hum. Genet.
\item Abney, Mark (2009). A graphical algorithm for fast computation of identity
coefficients and generalized kinship coefficients. Bioinformatics, 25,
1561-1563. \url{https://home.uchicago.edu/~abney/abney_web/Software.html}
}
}
\seealso{
\code{\link[=condensedIdentity]{condensedIdentity()}}, \code{\link[=gKinship]{gKinship()}}
}
