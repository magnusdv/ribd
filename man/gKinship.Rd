% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gKinship.R
\name{gKinship}
\alias{gKinship}
\title{Generalised kinship coefficients}
\usage{
gKinship(
  x,
  pattern,
  Xchrom = FALSE,
  mem = NULL,
  method = c("auto", "K", "WL", "LS", "GC"),
  verbose = FALSE,
  debug = FALSE,
  ...
)
}
\arguments{
\item{x}{A \code{ped} object.}

\item{pattern}{A \code{kinpat} object, or a list to be passed onto \code{\link[=kinpat]{kinpat()}}.}

\item{Xchrom}{A logical, by default FALSE.}

\item{mem}{For internal use.}

\item{method}{Either "auto", "K", "WL", "LS" or "GC".}

\item{verbose}{A logical, by default FALSE.}

\item{debug}{A logical, by default FALSE.}

\item{...}{Further arguments.}
}
\value{
A single probability.
}
\description{
Compute generalised single-locus kinship coefficients, as defined by Weeks &
Lange (1988), and also the further generalisation by Lange & Sinsheimer
(1992) allowing to specify if the alleles involved are paternally or
maternally inherited.
}
\examples{

x = nuclearPed(3)
kp = kinpat(x, list(c(1,1,1)))
gKinship(x, kp, method = "WL", debug = TRUE)

# Deterministic
kp = kinpat(x, list(c(p=1,p=1), c(m=3, m=2)))
gKinship(x, kp, method = "GC", debug = TRUE)


##### Kappa coefficients via generalised kinship ###

# NB: Much less efficient than `kappaIBD()`; serves only as validation

kappa_from_gk = function(x, ids, method = "WL") {
  fa1 = father(x, ids[1])
  fa2 = father(x, ids[2])
  mo1 = mother(x, ids[1])
  mo2 = mother(x, ids[2])

  GK = function(...) gKinship(x, list(...), method = method)

  k0 = GK(fa1, fa2, mo1, mo2)
  k1 = GK(c(fa1, fa2), mo1, mo2) + GK(c(fa1, mo2), fa2, mo1) +
       GK(c(mo1, fa2), fa1, mo2) + GK(c(mo1, mo2), fa1, fa2)
  k2 = GK(c(fa1, fa2), c(mo1, mo2)) + GK(c(fa1, mo2), c(mo1, fa2))
  c(k0, k1, k2)
}

y1 = nuclearPed(2); ids = 3:4
stopifnot(kappa_from_gk(y1, ids) == kappaIBD(y1, ids))

y2 = quadHalfFirstCousins(); ids = 9:10
stopifnot(kappa_from_gk(y2, ids) == kappaIBD(y2, ids))

}
